<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.29">
  <displayName>agi-apps-test/openshiftplugin-example-pipeline</displayName>
  <keepDependencies>false</keepDependencies>
  <properties>
    <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@1.0.27">
      <uid>e196eede-6cc1-11e9-96ea-005056a11817</uid>
      <namespace>agi-apps-test</namespace>
      <name>openshiftplugin-example-pipeline</name>
      <resourceVersion>135815262</resourceVersion>
      <buildRunPolicy>Serial</buildRunPolicy>
    </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.61.1">
    <script>openshift.withCluster() { // Use &quot;default&quot; cluster or fallback toOpenShift cluster detection
    /** Selectors are a core concept in the DSL. They allow the user to invoke operations **/
    /** on group of objects which satisfy a given criteria. **/
    
    // Create a Selector capable of selecting all services in clusters default project
    def svcSelector = openshift.selector(&apos;service&apos;)
    
    // Prints `oc describe service` to Jenkins console
    svcSelector.describe()
    
    // Selectors also allow you to easily iterate through all objects they currently select.
    svcSelector.withEach {  // The closure body will be executed once for each selected object.
        // The &apos;it&apos; variable will be bound to a Selector which selects a single
        // object which is the focus of the iteration.
        echo &quot;Service account: ${it.name()} is defined in ${openshift.project()}&quot;
    }
    
    // Selectors can also be defined using qualified names
    openshift.selector( &apos;deploymentconfig/heatdrill-service&apos; ).describe()
    
    // Or Kind + Label information
    openshift.selector( &apos;dc&apos;, [ tier: &apos;ilivalidator-service&apos; ] ).describe()

    // Or a static list of names
    openshift.selector( [ &apos;dc/heatdrill-service&apos;, &apos;svc/jenkins&apos; ] ).describe()
    
    // Also, you can easily test to see if the selector found what 
    // were looking for and vary your pipeline&apos;s logic as needed.
    def templateSelector = openshift.selector( &quot;template&quot;, &quot;ilivalidator-template&quot;)
    def templateExists = templateSelector.exists()
    def template
    if (!templateExists) {
      template = openshift.create(&apos;https://raw.githubusercontent.com/sogis/openshift-templates/master/ilivalidator/ilivalidator-web-service.yaml&apos;).object()
      echo &quot;Template created&quot;
    } 
    else {
      template = templateSelector.object()
      echo &quot;Template ${templateSelector}.name() exists&quot;
    }
    
    // Change to another project
    openshift.withProject(&apos;gdi-test&apos;) {
        // Create a Selector capable of selecting all services in clusters default project
        def svcSelector2 = openshift.selector(&apos;service&apos;)
    
        // Prints `oc describe service` to Jenkins console
        svcSelector2.describe()
        echo &quot;Hello from project ${openshift.project()} in cluster ${openshift.cluster()}&quot;
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>